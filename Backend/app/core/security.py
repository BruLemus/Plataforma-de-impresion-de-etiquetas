from datetime import datetime, timedelta
from jose import jwt, JWTError
from passlib.context import CryptContext
from fastapi import Depends, HTTPException, Security, Header
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from sqlalchemy.orm import Session
from app.db.database import get_db

# üîπ Importa todos los modelos de usuarios (GDL y MX)
from app.db.models.user_coordinador import UserCoordinador  # Guadalajara
from app.db.models.user_coordinador_mx import UserCoordinadorMX  # M√©xico
from app.db.models.user_practicante import UserPracticante  # Guadalajara
from app.db.models.user_practicante_mx import UserPracticanteMX  # M√©xico


# ==========================================================
# üîπ Configuraci√≥n de seguridad
# ==========================================================
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
SECRET_KEY = "SUPER_SECRET_KEY"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 720  # 12 horas

security = HTTPBearer()


# ==========================================================
# üîπ Funciones de hashing
# ==========================================================
def verify_password(plain_password: str, hashed_password: str) -> bool:
    """Verifica que la contrase√±a en texto plano coincida con el hash."""
    return pwd_context.verify(plain_password, hashed_password)


def hash_password(password: str) -> str:
    """Genera el hash seguro de una contrase√±a."""
    return pwd_context.hash(password)


# ==========================================================
# üîπ Generaci√≥n de JWT
# ==========================================================
def create_access_token(data: dict, expires_delta: int = None) -> str:
    """
    Crea un token JWT con los datos del usuario.
    data: Diccionario con informaci√≥n del usuario (ej. {"id": id, "tipo": "coordinador", "region": "mx"})
    """
    to_encode = data.copy()
    expire = datetime.utcnow() + timedelta(minutes=expires_delta or ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode.update({"exp": expire})
    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)


# ==========================================================
# üîπ Obtener usuario actual (autom√°tico seg√∫n tipo y regi√≥n)
# ==========================================================
def get_current_user(
    token: str = Header(...),  # Header personalizado: token: <JWT>
    db: Session = Depends(get_db)
):
    """
    Valida el token JWT y obtiene al usuario correspondiente seg√∫n:
    - tipo: coordinador / practicante
    - region: gdl / mx
    """
    if not token:
        raise HTTPException(status_code=401, detail="Token requerido")

    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        id = payload.get("id")
        tipo = payload.get("tipo")
        region = payload.get("region", "gdl")  # Por defecto Guadalajara

        if not id or not tipo:
            raise HTTPException(status_code=401, detail="Token inv√°lido")

    except JWTError:
        raise HTTPException(status_code=401, detail="Token inv√°lido o expirado")

    # =====================================
    # üî∏ Coordinadores
    # =====================================
    if tipo == "coordinador":
        if region.lower() == "mx":
            user = db.query(UserCoordinadorMX).filter(UserCoordinadorMX.id == id).first()
        else:
            user = db.query(UserCoordinador).filter(UserCoordinador.id == id).first()

        if not user:
            raise HTTPException(status_code=401, detail="Usuario coordinador no encontrado")
        return user

    # =====================================
    # üî∏ Practicantes
    # =====================================
    elif tipo == "practicante":
        if region.lower() == "mx":
            user = db.query(UserPracticanteMX).filter(UserPracticanteMX.id == id).first()
        else:
            user = db.query(UserPracticante).filter(UserPracticante.id == id).first()

        if not user:
            raise HTTPException(status_code=401, detail="Usuario practicante no encontrado")
        return user

    # =====================================
    # ‚ùå Rol inv√°lido
    # =====================================
    else:
        raise HTTPException(status_code=400, detail="Tipo de usuario no v√°lido (usa 'coordinador' o 'practicante')")
